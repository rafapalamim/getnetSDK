<?php

namespace GetNet\Parts;

use GetNet\Exception\SDKException;

/**
 * Purchaser card data
 */
class ClientCard implements \GetNet\Interfaces\MethodPaymentInterface
{

    /** @var string */
    public const MASTERCARD = 'Mastercard';

    /** @var string */
    public const VISA = 'Visa';

    /** @var string */
    public const AMEX = 'Amex';

    /** @var string */
    public const ELO = 'Elo';

    /** @var string */
    public const Hipercard = 'Hipercard';

    /** @var string */
    public const CREDIT = 'credit';

    /** @var string */
    public const CREDIT_ENDPOINT = '/v1/payments/credit';

    /** @var string */
    public const DEBIT = 'debit';

    /** @var string */
    public const DEBIT_ENDPOINT = '/v1/payments/debit';

    /** @var string */
    private $numberCard;

    /** @var string */
    private $brand;

    /** @var string */
    private $cardHolderName;

    /** @var string */
    private $expirationMonth;

    /** @var string */
    private $expirationYear;

    /** @var string */
    private $securityCode;

    /** @var string */
    private $idSavedCard;

    /** @var string */
    private $tokenCard;

    /** @var string */
    private $lastDigits;

    /** @var null|\stdClass */
    private $verification;

    /** @var string */
    private $type;

    function __construct(array $data, string $id_saved_card = null, string $securityCodeSaved = null, string $typeCardSaved = null)
    {

        if ($id_saved_card) {

            if (!$securityCodeSaved || !$typeCardSaved) {
                throw new SDKException("Please, inform a securityCode and typeCard when the id_saved_card params is informed");
            }

            $this->idSavedCard = filter_var($id_saved_card, FILTER_SANITIZE_STRING);
            $this->securityCode = filter_var($securityCodeSaved, FILTER_SANITIZE_NUMBER_INT);
            $this->type = $typeCardSaved;
        }

        if ($data) {
            $this->numberCard = $data[0];
            $this->brand = $data[1];
            $this->cardHolderName = $data[2];
            $this->expirationMonth = $data[3];
            $this->expirationYear = $data[4];
            $this->securityCode = $data[5];
            $this->type = $data[6];
            $this->verification = null;

            $this->lastDigits = substr($this->numberCard, (strlen($this->numberCard) - 4));
        }
    }

    /**
     * Magic method __get
     *
     * @param string $field
     * @return mixed
     */
    function __get(string $field)
    {
        if ($this->$field) {
            return $this->$field;
        }
        return null;
    }

    /**
     * Magic method __set
     *
     * @param string $field
     * @param [type] $value
     */
    function __set(string $field, $value)
    {        
        $this->$field = $value;
    }

    /**
     * Magic method __isset
     *
     * @param string $field
     * @return boolean
     */
    function __isset(string $field)
    {
        return isset($this->$field);
    }

    /**
     * Set token card generated by GetNet
     *
     * @param string $tokenCard
     * @return ClientCard
     */
    public function setTokenCard(string $tokenCard): ClientCard
    {
        $this->tokenCard = $tokenCard;
        return $this;
    }

    /**
     * Set token card generated by GetNet
     *
     * @param string $tokenCard
     * @return ClientCard
     */
    public function saveCardVerification(\stdClass $verification): ClientCard
    {

        if ($this->brand != self::AMEX) {
            $this->verification = $verification;
        }
        return $this;
    }

    /**
     * Check if card is verified
     *
     * @return void
     */
    public function cardIsVerified()
    {
        if ($this->brand != self::AMEX) {
            return ($this->verification->status == 'VERIFIED');
        }

        return true;
    }

    /**
     * Set a id card saved on getnet (recurrency)
     *
     * @param string $idCard
     * @return ClientCard
     */
    public function saveIdCard(string $idCard): ClientCard
    {
        $this->idSavedCard = $idCard;

        return $this;
    }


    /**
     * Return type of card (debit or credit)
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Get endpoint to make a transaction
     *
     * @return string
     */
    public function getTypeEndpoint()
    {
        if ($this->type) {
            return $this->type === self::CREDIT ? self::CREDIT_ENDPOINT : self::DEBIT_ENDPOINT;
        } else {
            throw new SDKException("No payment type setted");
        }
    }
}
